import React, { useState, useEffect, memo } from "react";
import {
  ActivityIndicator,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";
import MaterialCommunityIcons from "react-native-vector-icons/MaterialCommunityIcons";
import { useNavigation } from "@react-navigation/native";
import { connect } from "react-redux";
import { bindActionCreators } from "redux";

import { updateReduxProfileAddressId } from "../../backend/user";
import { updateBookingSearchArrayData } from "../../backend/booking";
import { colors } from "../../styles/base";
import { sentryLog } from "../../sentry";
import { setObjectAsync } from "../asyncstorage";
import { ASYNC_USER_PROFILE_ADDRESS_ID_KEY } from "../asyncstorage/constants";
import {
  detectEligibility,
  getAddressText,
  getLocales,
  updateReduxLastLocation,
  updateReduxandStorageLastLocation,
} from ".";
import { AddressData, AddressDataShort } from "./AddressData";
import {
  locationgpsheader,
  locationnull,
  locationstillfinding,
} from "./constants";

const AddressItem = (props) => {
  try {
    const {
      profile,
      item,
      isRealtime,
      isBooking,
      isSelected,
      location,
      locationError,
      locationLoading,
    } = props;
    const navigation = useNavigation();
    const [loading, setLoading] = useState(false);
    const [active, setActive] = useState(false);
    const [text, setText] = useState(null);
    const [realtimeItem, setRealtimeItem] = useState(null);
    const [realtimeDisabled, setRealtimeDisabled] = useState(true);

    useEffect(() => {
      const getLocaleNames = async () => {
        let locales = await getLocales(location?.coords);
        //console.log("reverseGeocodeAsync", locales);
        if (locales?.length === undefined || locales?.length < 1) {
          setText(
            `${location?.coords?.latitude}, ${location?.coords?.longitude}`
          );
          updateReduxandStorageLastLocation(props, location?.coords);
        } else {
          let eligibilities = detectEligibility(
            locales[0]?.subregion,
            locales[0]?.region
          );
          setRealtimeDisabled(
            !(eligibilities?.regionEligible && eligibilities?.subregionEligible)
          );
          let pinHeader = `${locales[0]?.subregion}, ${locales[0]?.region} ${locales[0]?.postalCode}`;
          let fullAddress = getAddressText(locales);
          setText(`${fullAddress}\n${pinHeader}`);
          setRealtimeItem({
            ...realtimeItem,
            pinHeader,
            fullAddress,
            label: fullAddress,
          });
          updateReduxandStorageLastLocation(props, {
            ...location.coords,
            locale: locales[0],
          });
        }
      };

      /*if (loading && isRealtime) {
        setLoading(false);
      }*/
      if (!isRealtime || location === null || location?.coords === undefined) {
        setRealtimeItem(null);
        return;
      }
      setRealtimeItem({
        ...AddressDataShort,
        addressId: "",
        latitude: location?.coords?.latitude,
        longitude: location?.coords?.longitude,
      });
      getLocaleNames();
    }, [location]);

    /*useEffect(() => {
      if (locationError !== null && loading && isRealtime) {
        setLoading(false);
      }
    }, [locationError]);*/

    useEffect(() => {
      if (
        profile === null ||
        profile?.addressId === undefined ||
        profile?.addressId === null ||
        profile?.addressId === ""
      ) {
        return;
      }

      if (profile?.addressId === item?.id) {
        setActive(true);
      } else {
        setActive(false);
      }

      if (loading) {
        setLoading(false);
      }
    }, [profile]);

    const pickAddress = async () => {
      if (isRealtime) {
        if (realtimeDisabled) {
          return;
        }
        if (isBooking) {
          if (realtimeItem === null || realtimeItem?.pinHeader === undefined) {
            return;
          } else if (
            realtimeItem?.fullAddress === "" ||
            realtimeItem?.pinHeader === ""
          ) {
            navigation.navigate("LocationPin", {
              ...AddressData,
              isBooking: true,
              isNew: true,
              isRealtime: true,
            });
            return;
          }
          console.log("realtime location for booking", realtimeItem);
        } else if (locationError === null) {
          navigation.navigate("LocationPin", {
            ...AddressData,
            isBooking: false,
            isNew: true,
            isRealtime: true,
          });
        }
      } else {
        if (
          (!isBooking && (active || profile?.addressId === item?.id)) ||
          item?.id === undefined ||
          item?.id === null ||
          item?.id === "" ||
          profile === null
        ) {
          return;
        }
        setLoading(true);
        if (!isBooking || profile?.addressId !== item?.id) {
          await setObjectAsync(ASYNC_USER_PROFILE_ADDRESS_ID_KEY, item?.id);
          props.updateReduxProfileAddressId(item?.id);
        }
      }

      if (
        !isBooking ||
        props?.onPress === undefined ||
        props?.onPress === null
      ) {
        return;
      }
      if (!isSelected) {
        props.updateBookingSearchArrayData([]);
      }
      if (isRealtime) {
        props?.onPress({ ...realtimeItem, addressId: "" });
      } else {
        props?.onPress({
          addressId: item?.id,
          pinHeader: item?.pinHeader,
          fullAddress: item?.fullAddress,
          label: item?.label,
          hint: item?.hint,
          latitude: item?.latitude,
          longitude: item?.longitude,
        });
      }
    };

    function refreshRealtime() {
      if (props?.refresh === undefined || props?.refresh === null) {
        return;
      }
      props?.refresh();
    }

    /*
    isRealtime && realtimeItem !== null && !realtimeDisabled
                  ? colors.pine_green
                  : active
                  ? colors.windows_blue
                  : colors.feed_desc_grey
*/
    return (
      <TouchableOpacity
        style={[styles.container, props?.style ? props?.style : null]}
        onPress={() => pickAddress()}
      >
        <View
          style={[
            styles.containerInner,
            {
              borderColor:
                (isRealtime && realtimeItem !== null && !realtimeDisabled) ||
                (isBooking && isSelected)
                  ? colors.pine_green
                  : active
                  ? colors.splash_blue
                  : colors.feed_desc_grey,
              backgroundColor:
                (isRealtime && realtimeItem !== null && !realtimeDisabled) ||
                (isBooking && isSelected)
                  ? colors.off_green
                  : active
                  ? colors.ice_blue
                  : "white",
            },
          ]}
        >
          <View style={styles.containerHorizontal}>
            <MaterialCommunityIcons
              name={
                isRealtime
                  ? "map-marker-radius"
                  : active
                  ? "map-marker-check"
                  : "map-marker"
              }
              size={32}
              color={isRealtime ? colors.rusty_red : colors.bold_green}
            />

            <View style={styles.containerVertical}>
              <View style={styles.containerHorizontalFlat}>
                <Text
                  style={[
                    styles.textName,
                    {
                      flex: 1,
                      color: isRealtime
                        ? locationError ||
                          realtimeItem === null ||
                          realtimeDisabled
                          ? colors.black
                          : colors.pine_green
                        : active
                        ? colors.splash_blue
                        : colors.feed_desc_grey,
                    },
                  ]}
                >
                  {isRealtime
                    ? locationLoading || realtimeItem === null
                      ? locationstillfinding
                      : locationError
                      ? locationError
                      : locationgpsheader
                    : item?.label}
                </Text>

                {isRealtime ? (
                  locationLoading ? (
                    <ActivityIndicator
                      size="small"
                      color={
                        realtimeDisabled
                          ? colors.feed_desc_grey
                          : colors.pine_green
                      }
                    />
                  ) : (
                    <TouchableOpacity
                      onPress={() => refreshRealtime()}
                      style={styles.containerButtons}
                      disabled={loading}
                    >
                      <MaterialCommunityIcons
                        name="refresh-circle"
                        size={20}
                        color={
                          realtimeItem === null ||
                          locationError !== null ||
                          realtimeDisabled
                            ? colors.feed_desc_grey
                            : colors.pine_green
                        }
                      />
                    </TouchableOpacity>
                  )
                ) : null}
              </View>

              {isRealtime ? (
                locationLoading ||
                locationError ||
                location === null ||
                location?.coords === undefined ? null : (
                  <Text style={[styles.textDesc, { marginTop: 6 }]}>
                    {text ? text : locationnull}
                  </Text>
                )
              ) : (
                <Text style={[styles.textDesc, { marginTop: 6 }]}>
                  {item?.fullAddress ? item?.fullAddress : item?.pinHeader}
                </Text>
              )}

              {isRealtime ||
              item === undefined ||
              item?.hint === null ? null : (
                <Text style={styles.textDesc}>{item?.hint}</Text>
              )}
            </View>
          </View>
        </View>
        {isRealtime ? (
          <TouchableOpacity
            style={[
              styles.containerRealtimeButton,
              {
                backgroundColor:
                  locationError === null && !realtimeDisabled
                    ? colors.pine_green
                    : colors.feed_desc_grey,
              },
            ]}
            onPress={() => pickAddress()}
            disabled={
              loading ||
              locationError !== null ||
              (isRealtime && realtimeDisabled)
            }
          >
            <MaterialCommunityIcons
              name={
                isRealtime && realtimeDisabled
                  ? "map-marker-alert"
                  : isBooking
                  ? "content-save"
                  : "cursor-pointer"
              }
              size={16}
              color={colors.light_grey}
              style={{ backgroundColor: "transparent" }}
            />
            <Text style={styles.textButton}>
              {isRealtime && realtimeDisabled
                ? locationError === null
                  ? "Di Luar Jangkauan Home Clinic"
                  : locationnull
                : isBooking
                ? "Pilih Untuk Booking"
                : "Simpan Lokasi"}
            </Text>
          </TouchableOpacity>
        ) : (
          <View style={styles.containerButtons}>
            <TouchableOpacity
              onPress={() => pickAddress()}
              style={[
                styles.containerButton,
                {
                  backgroundColor:
                    (isBooking && isSelected) || (!isBooking && active)
                      ? colors.pine_green
                      : colors.splash_blue,
                  borderBottomLeftRadius: 6,
                },
              ]}
              disabled={active || loading}
            >
              {loading ? (
                <ActivityIndicator size="small" color={colors.light_grey} />
              ) : (
                <MaterialCommunityIcons
                  name={active && !isBooking ? "check-bold" : "cursor-pointer"}
                  size={16}
                  color={colors.light_grey}
                />
              )}

              <Text style={styles.textButton}>
                {active && !isBooking
                  ? "Aktif"
                  : isBooking && isSelected
                  ? "Terpilih"
                  : "Pilih"}
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              onPress={() =>
                navigation.navigate("AddAddress", {
                  ...AddressData,
                  ...item,
                  isBooking,
                  isNew: false,
                })
              }
              style={[
                styles.containerButton,
                {
                  backgroundColor: colors.orange_yellow,
                  borderBottomRightRadius: 6,
                },
              ]}
              disabled={loading}
            >
              <MaterialCommunityIcons
                name="file-edit"
                size={16}
                color={colors.light_grey}
              />
              <Text style={styles.textButton}>Edit</Text>
            </TouchableOpacity>
          </View>
        )}
      </TouchableOpacity>
    );
  } catch (e) {
    console.error(e);
    sentryLog(e);
    return (
      <View>
        <Text>{e.toString()}</Text>
      </View>
    );
  }
};

const styles = StyleSheet.create({
  container: {
    marginHorizontal: 20,
    elevation: 4,
    borderTopStartRadius: 5,
    borderTopEndRadius: 5,
    borderBottomStartRadius: 6,
    borderBottomEndRadius: 6,
    backgroundColor: "transparent",
  },
  containerInner: {
    borderWidth: 1,
    borderTopStartRadius: 6,
    borderTopEndRadius: 6,
    borderBottomWidth: 0,
  },
  containerHorizontalFlat: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "transparent",
    alignItems: "center",
  },
  containerHorizontal: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "transparent",
    marginTop: 20,
    marginBottom: 24,
    marginHorizontal: 20,
  },
  containerVertical: {
    flex: 1,
    backgroundColor: "transparent",
    marginStart: 20,
  },
  containerRealtimeButton: {
    paddingVertical: 10,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    borderBottomStartRadius: 6,
    borderBottomEndRadius: 6,
  },
  containerButtons: {
    flexDirection: "row",
    backgroundColor: "transparent",
  },
  containerButton: {
    flex: 1,
    paddingVertical: 10,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
  },
  textName: {
    fontFamily: "Montserrat-SemiBold",
    fontSize: 14,
    backgroundColor: "transparent",
    color: colors.splash_blue,
  },
  textDesc: {
    fontFamily: "Montserrat-Medium",
    fontSize: 12,
    backgroundColor: "transparent",
    color: colors.feed_desc_grey,
  },
  textButton: {
    fontSize: 14,
    fontFamily: "Montserrat-SemiBold",
    backgroundColor: "transparent",
    color: colors.light_grey,
    marginStart: 6,
  },
  icon: {
    width: 60,
    height: 60,
    borderRadius: 30,
    elevation: 6,
  },
});

const mapStateToProps = (store) => ({
  profile: store.userState.profile,
});

const mapDispatchProps = (dispatch) =>
  bindActionCreators(
    {
      updateReduxProfileAddressId,
      updateBookingSearchArrayData,
      updateReduxLastLocation,
    },
    dispatch
  );

export default memo(connect(mapStateToProps, mapDispatchProps)(AddressItem));
